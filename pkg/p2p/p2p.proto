syntax = "proto3";

package p2p;

option go_package = "go-blockchain/pkg/p2p";

// BlockchainService defines the gRPC service for blockchain communication
service BlockchainService {
    // Send a transaction to a node
    rpc SendTransaction(TransactionRequest) returns (TransactionResponse);
    
    // Propose a block to other nodes
    rpc ProposeBlock(BlockProposal) returns (BlockProposalResponse);
    
    // Vote on a proposed block
    rpc Vote(VoteRequest) returns (VoteResponse);
    
    // Get a block by index
    rpc GetBlock(GetBlockRequest) returns (GetBlockResponse);
    
    // Get the latest block
    rpc GetLatestBlock(GetLatestBlockRequest) returns (GetLatestBlockResponse);
    
    // Get blocks from a specific index (for syncing)
    rpc GetBlocksFromIndex(GetBlocksFromIndexRequest) returns (GetBlocksFromIndexResponse);
    
    // Get node status
    rpc GetNodeStatus(GetNodeStatusRequest) returns (GetNodeStatusResponse);
    
    // Commit a block (after consensus)
    rpc CommitBlock(CommitBlockRequest) returns (CommitBlockResponse);
}

// Transaction message
message Transaction {
    bytes sender = 1;
    bytes receiver = 2;
    double amount = 3;
    int64 timestamp = 4;
    bytes signature = 5;
    bytes tx_hash = 6;
}

// Block message
message Block {
    int64 index = 1;
    int64 timestamp = 2;
    repeated Transaction transactions = 3;
    bytes merkle_root = 4;
    bytes previous_block_hash = 5;
    bytes current_block_hash = 6;
    int64 nonce = 7;
}

// Transaction request/response
message TransactionRequest {
    Transaction transaction = 1;
}

message TransactionResponse {
    bool success = 1;
    string message = 2;
}

// Block proposal request/response
message BlockProposal {
    Block block = 1;
    string proposer_id = 2;
    int64 proposal_id = 3;
}

message BlockProposalResponse {
    bool accepted = 1;
    string message = 2;
    string voter_id = 3;
}

// Vote request/response
message VoteRequest {
    int64 proposal_id = 1;
    bytes block_hash = 2;
    bool accept = 3;
    string voter_id = 4;
}

message VoteResponse {
    bool success = 1;
    string message = 2;
}

// Get block request/response
message GetBlockRequest {
    int64 index = 1;
}

message GetBlockResponse {
    Block block = 1;
    bool found = 2;
}

// Get latest block request/response
message GetLatestBlockRequest {
}

message GetLatestBlockResponse {
    Block block = 1;
    bool found = 2;
}

// Get blocks from index request/response
message GetBlocksFromIndexRequest {
    int64 start_index = 1;
    int32 limit = 2;
}

message GetBlocksFromIndexResponse {
    repeated Block blocks = 1;
}

// Node status request/response
message GetNodeStatusRequest {
}

message GetNodeStatusResponse {
    string node_id = 1;
    bool is_leader = 2;
    int64 latest_block_index = 3;
    int32 pending_transactions = 4;
    string status = 5;
}

// Commit block request/response
message CommitBlockRequest {
    Block block = 1;
    int64 proposal_id = 2;
}

message CommitBlockResponse {
    bool success = 1;
    string message = 2;
} 